flow PRB2 {
    in ENABLE = 1;
    in EXTRA_TESTS = -1;


    setup {
        suite erase_all calls ac_tml.AcTest.FunctionalTest {
            measurement.pattern = setupRef(OrigenTesters.patterns.erase_all);
            measurement.specification = setupRef(OrigenTesters.specs.specs.Nominal);
            output = "None";
            testName = "Functional";
        }

        suite erase_all_1 calls ac_tml.AcTest.FunctionalTest {
            measurement.pattern = setupRef(OrigenTesters.patterns.erase_all);
            measurement.specification = setupRef(OrigenTesters.specs.specs.Nominal);
            output = "None";
            testName = "Functional";
        }

        suite erase_all_2 calls ac_tml.AcTest.FunctionalTest {
            measurement.pattern = setupRef(OrigenTesters.patterns.erase_all);
            measurement.specification = setupRef(OrigenTesters.specs.specs.Nominal);
            output = "None";
            testName = "Functional";
        }

        suite margin_read1_all1 calls ac_tml.AcTest.FunctionalTest {
            measurement.pattern = setupRef(OrigenTesters.patterns.margin_read1_all1);
            measurement.specification = setupRef(OrigenTesters.specs.specs.Nominal);
            output = "None";
            testName = "Functional";
        }

        suite margin_read1_all1_1 calls ac_tml.AcTest.FunctionalTest {
            measurement.pattern = setupRef(OrigenTesters.patterns.margin_read1_all1);
            measurement.specification = setupRef(OrigenTesters.specs.specs.Nominal);
            output = "None";
            testName = "Functional";
        }

        suite margin_read1_all1_2 calls ac_tml.AcTest.FunctionalTest {
            measurement.pattern = setupRef(OrigenTesters.patterns.margin_read1_all1);
            measurement.specification = setupRef(OrigenTesters.specs.specs.Nominal);
            output = "None";
            testName = "Functional";
        }

        suite margin_read1_all1_3 calls ac_tml.AcTest.FunctionalTest {
            measurement.pattern = setupRef(OrigenTesters.patterns.margin_read1_all1);
            measurement.specification = setupRef(OrigenTesters.specs.specs.Nominal);
            output = "None";
            testName = "Functional";
        }

        flow PRB2_MAIN calls OrigenTesters.flows.prb2.PRB2_MAIN { }
        flow PRB2_MAIN_1 calls OrigenTesters.flows.prb2.PRB2_MAIN_1 { }
    }

    execute {
        if (ENABLE == 1) {
            erase_all.execute();
            margin_read1_all1.execute();
            erase_all_1.execute();
            margin_read1_all1_1.execute();
            PRB2_MAIN.execute();
            erase_all_2.execute();
            margin_read1_all1_2.execute();
            if (EXTRA_TESTS == 1) {
                PRB2_MAIN_1.execute();
            } else {
            }
            margin_read1_all1_3.execute();
        }
    }
}
