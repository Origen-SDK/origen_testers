// ***************************************************************************
// GENERATED:
//   Time:    13-Feb-2024 10:23AM
//   By:      Paul DeRouen
//   Mode:    debug
//   Command: origen g v93k_workout -t legacy.rb -e stil.rb
// ***************************************************************************
// ENVIRONMENT:
//   Application
//     Source:    git@github.com:Origen-SDK/origen_testers.git
//     Version:   0.51.3
//     Branch:    stil_groups(063718e8bff) (+local edits)
//   Origen
//     Source:    https://github.com/Origen-SDK/origen
//     Version:   0.60.7
//   Plugins
//     origen_arm_debug:         0.4.3
//     origen_doc_helpers:       0.8.6
//     origen_jtag:              0.22.2
//     origen_stil:              0.3.0
//     origen_swd:               1.1.2
// ***************************************************************************
STIL 1.0;

Signals {
  nvm_reset InOut;
  nvm_clk InOut;
  nvm_clk_mux InOut;
  porta7 InOut;
  porta6 InOut;
  porta5 InOut;
  porta4 InOut;
  porta3 InOut;
  porta2 InOut;
  porta1 InOut;
  porta0 InOut;
  portb0 InOut;
  portb1 InOut;
  portb2 InOut;
  portb3 InOut;
  portb4 InOut;
  portb5 InOut;
  portb6 InOut;
  portb7 InOut;
  nvm_invoke InOut;
  nvm_done InOut;
  nvm_fail InOut;
  nvm_alvtst InOut;
  nvm_ahvtst InOut;
  nvm_dtst InOut;
  tclk InOut;
  trst InOut;
}

SignalGroups {
  "porta" = 'porta7+porta6+porta5+porta4+porta3+porta2+porta1+porta0';
  "portb" = 'portb0+portb1+portb2+portb3+portb4+portb5+portb6+portb7';
  "ALL" = 'nvm_reset+nvm_clk+nvm_clk_mux+porta7+porta6+porta5+porta4+porta3+porta2+porta1+porta0+portb0+portb1+portb2+portb3+portb4+portb5+portb6+portb7+nvm_invoke+nvm_done+nvm_fail+nvm_alvtst+nvm_ahvtst+nvm_dtst+tclk+trst';
}

Timing t_v93k_workout {
  WaveformTable Waveset1 {
    Period '40ns';
    Waveforms {
      nvm_reset { 01 { }}
      nvm_reset { LHX { }}
      nvm_clk { 01 { }}
      nvm_clk { LHX { }}
      nvm_clk_mux { 01 { }}
      nvm_clk_mux { LHX { }}
      porta7 { 01 { }}
      porta7 { LHX { }}
      porta6 { 01 { }}
      porta6 { LHX { }}
      porta5 { 01 { }}
      porta5 { LHX { }}
      porta4 { 01 { }}
      porta4 { LHX { }}
      porta3 { 01 { }}
      porta3 { LHX { }}
      porta2 { 01 { }}
      porta2 { LHX { }}
      porta1 { 01 { }}
      porta1 { LHX { }}
      porta0 { 01 { }}
      porta0 { LHX { }}
      portb0 { 01 { }}
      portb0 { LHX { }}
      portb1 { 01 { }}
      portb1 { LHX { }}
      portb2 { 01 { }}
      portb2 { LHX { }}
      portb3 { 01 { }}
      portb3 { LHX { }}
      portb4 { 01 { }}
      portb4 { LHX { }}
      portb5 { 01 { }}
      portb5 { LHX { }}
      portb6 { 01 { }}
      portb6 { LHX { }}
      portb7 { 01 { }}
      portb7 { LHX { }}
      nvm_invoke { 01 { }}
      nvm_invoke { LHX { }}
      nvm_done { 01 { }}
      nvm_done { LHX { }}
      nvm_fail { 01 { }}
      nvm_fail { LHX { }}
      nvm_alvtst { 01 { }}
      nvm_alvtst { LHX { }}
      nvm_ahvtst { 01 { }}
      nvm_ahvtst { LHX { }}
      nvm_dtst { 01 { }}
      nvm_dtst { LHX { }}
      tclk { 01 { }}
      tclk { LHX { }}
      trst { 01 { }}
      trst { LHX { }}
    }
  }
}

PatternBurst b_v93k_workout {
  PatList { v93k_workout; }
}

PatternExec e_v93k_workout {
  Timing t_v93k_workout;
  PatternBurst b_v93k_workout;
}

Pattern "v93k_workout" {
v93k_workout:
W Waveset1;
Ann {*// ######################################################################*}
Ann {*// ## Test that basic cycling works*}
Ann {*// ######################################################################*}
  V { "ALL" = 11100000000000000000HLXXX01; }
Loop 10 {
  V { "ALL" = 11100000000000000001HLXXX01; }
}
  V { "ALL" = 11100000000000000000HLXXX01; }
  V { "ALL" = 11100000000000000001HLXXX01; }
  V { "ALL" = 11100000000000000000HLXXX01; }
  V { "ALL" = 11100000000000000001HLXXX01; }
  V { "ALL" = 11100000000000000000HLXXX01; }
  V { "ALL" = 11100000000000000001HLXXX01; }
  V { "ALL" = 11100000000000000000HLXXX01; }
  V { "ALL" = 11100000000000000001HLXXX01; }
  V { "ALL" = 11100000000000000000HLXXX01; }
  V { "ALL" = 11100000000000000001HLXXX01; }
Ann {*// ######################################################################*}
Ann {*// ## Test that the port API works*}
Ann {*// ######################################################################*}
  V { "ALL" = 11101010101000000001HLXXX01; }
  V { "ALL" = 111HLHLHLHL000000001HLXXX01; }
  V { "ALL" = 11101010101000000001HLXXX01; }
  V { "ALL" = 111XXXXXXXX000000001HLXXX01; }
  V { "ALL" = 11111111111000000001HLXXX01; }
  V { "ALL" = 11122222222000000001HLXXX01; }
  V { "ALL" = 11100000000000000001HLXXX01; }
  V { "ALL" = 111HHHHHHHH000000001HLXXX01; }
  V { "ALL" = 111LLLLLLLL000000001HLXXX01; }
Ann {*// ######################################################################*}
Ann {*// ## Test that the store method works*}
Ann {*// ######################################################################*}
Ann {*// This vector should capture the FAIL pin data*}
  V { "ALL" = 11100000000000000001HCXXX01; }
  V { "ALL" = 11100000000000000001HLXXX01; }
Ann {*// This vector should capture the FAIL pin and the PORTA data*}
  V { "ALL" = 111CCCCCCCC000000001HCXXX01; }
Loop 3 {
  V { "ALL" = 11100000000000000001HLXXX01; }
}
Ann {*// This vector should capture the FAIL pin data*}
  V { "ALL" = 11100000000000000001HCXXX01; }
Ann {*// ######################################################################*}
Ann {*// ## Test calling a subroutine*}
Ann {*// ######################################################################*}
Ann {*// This vector should call subroutine 'sub1'*}
  V { "ALL" = 11100000000000000001HLXXX01; }
Call sub1;
Ann {*// This vector should call subroutine 'sub2'*}
  V { "ALL" = 11100000000000000001HLXXX01; }
Call sub2;
  V { "ALL" = 11100000000000000001HLXXX01; }
Ann {*// ######################################################################*}
Ann {*// ## Test a single pin match loop*}
Ann {*// ######################################################################*}
Ann {*// Wait for a maximum of 5.0ms*}
Ann {*// ######################################################################*}
Ann {*// ## Test a two pin match loop*}
Ann {*// ######################################################################*}
Ann {*// Wait for a maximum of 5.0ms*}
Ann {*// ######################################################################*}
Ann {*// ## Test a block match loop*}
Ann {*// ######################################################################*}
Ann {*// Wait for a maximum of 5.0ms*}
Ann {*// ######################################################################*}
Ann {*// ## Test looping, these vectors should be executed once*}
Ann {*// ######################################################################*}
  V { "ALL" = 11110101010000000001HLXXX01; }
  V { "ALL" = 11101010101000000001HLXXX01; }
Ann {*// ######################################################################*}
Ann {*// ## Test looping, these vectors should be executed 3 times*}
Ann {*// ######################################################################*}
test_loop_2: Loop 3 {
  V { "ALL" = 11110101010000000001HLXXX01; }
  V { "ALL" = 11101010101000000001HLXXX01; }
}
Ann {*// ######################################################################*}
Ann {*// ## Test looping, these vectors should be executed 5 times*}
Ann {*// ######################################################################*}
loop: Loop 5 {
  V { "ALL" = 11110101010000000001HLXXX01; }
  V { "ALL" = 11101010101000000001HLXXX01; }
}
Ann {*// ######################################################################*}
Ann {*// ## Test suspend compares*}
Ann {*// ######################################################################*}
  V { "ALL" = 11101010101000000001HHXXX01; }
Ann {*// The fail pin should not be compared on these vectors*}
Loop 10 {
  V { "ALL" = 11101010101000000001HXXXX01; }
}
Ann {*// And now it should*}
  V { "ALL" = 11101010101000000001HHXXX01; }
Ann {*// ######################################################################*}
Ann {*// ## Test inhibit vectors and comments*}
Ann {*// ######################################################################*}
Ann {*// The invoke pin should be driving high on this cycle*}
  V { "ALL" = 11101010101000000001HHXXX01; }
Ann {*// This should be the last thing you see until 'Inhibit complete!'*}
Ann {*// Inhibit complete!*}
Ann {*// The invoke pin should be driving low on this cycle*}
  V { "ALL" = 11101010101000000000HHXXX01; }
Ann {*// ######################################################################*}
Ann {*// ## Pattern complete*}
Ann {*// ######################################################################*}
  V { "ALL" = 11101010101000000000HHXXX01; }
Stop;
}
